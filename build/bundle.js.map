{"version":3,"sources":["webpack:///webpack/bootstrap b38b6420749c17f58f52","webpack:///./node_modules/@polymer/polymer/lib/utils/boot.js","webpack:///./node_modules/lit-html/lit-html.js","webpack:///./node_modules/@polymer/polymer/lib/utils/mixin.js","webpack:///./lit-test.js","webpack:///./node_modules/@polymer/lit-element/lit-element.js","webpack:///./node_modules/lit-html/lib/lit-extended.js","webpack:///./node_modules/@polymer/polymer/lib/mixins/properties-mixin.js","webpack:///./node_modules/@polymer/polymer/lib/mixins/properties-changed.js","webpack:///./node_modules/@polymer/polymer/lib/utils/async.js","webpack:///./node_modules/@polymer/polymer/lib/utils/case-map.js","webpack:///./node_modules/lit-html/lib/shady-render.js"],"names":["window","JSCompiler_renameProperty","prop","obj","defaultTemplateFactory","render","templateCaches","Map","html","strings","values","TemplateResult","svg","SVGTemplateResult","type","partCallback","defaultPartCallback","l","length","isTextBinding","i","s","closing","findTagClose","nodeMarker","marker","template","document","createElement","innerHTML","getHTML","content","svgElement","firstChild","removeChild","reparentNodes","result","templateCache","get","undefined","set","Template","getTemplateElement","container","templateFactory","instance","__templateInstance","_partCallback","update","TemplateInstance","fragment","_clone","removeNodes","appendChild","String","Math","random","slice","markerRegex","RegExp","lastAttributeNameRegex","str","close","lastIndexOf","open","indexOf","TemplatePart","index","name","rawName","element","parts","walker","createTreeWalker","partIndex","nodesToRemove","previousNode","currentNode","nextNode","node","nodeType","hasAttributes","attributes","count","value","stringForPart","attributeNameInPart","exec","attribute","getNamedItem","stringsForAttributeValue","split","push","removeAttribute","nodeValue","parent","parentNode","lastIndex","textContent","insertBefore","createTextNode","previousSibling","Node","TEXT_NODE","nextSibling","n","getValue","part","isDirective","directiveValue","directive","f","__litDirective","o","isPrimitiveValue","AttributePart","size","_previousValues","startIndex","text","v","Array","isArray","Symbol","iterator","t","_equalToPreviousValues","join","_interpolate","setAttribute","NodePart","startNode","endNode","_previousValue","_setText","_setTemplateResult","_setIterable","_setNode","then","_setPromise","clear","_insert","_getTemplate","itemParts","item","itemPart","itemStart","previousPart","setValue","lastPart","templatePart","Error","getTemplate","_parts","valueIndex","importNode","start","end","before","dedupeId","MixinFunction","prototype","__mixinApplications","__mixinSet","dedupingMixin","mixin","mixinApplications","WeakMap","mixinDedupeId","base","baseSet","map","extended","mixinSet","Object","create","LitTest","foo","whales","Number","addEventListener","e","renderComplete","dispatchEvent","CustomEvent","detail","repeat","LitElement","customElements","define","renderAttributes","classString","styleString","attrInfo","a","getAttribute","hasAttribute","classInfo","styleInfo","arguments","__renderComplete","__resolveRenderComplete","__isInvalid","__isChanging","_root","_createRoot","attachShadow","mode","_props","_changedProps","_prevProps","props","changedProps","prevProps","localName","didRender","property","old","change","console","trace","_getProperty","_invalidateProperties","Promise","resolve","HTMLElement","extendedPartCallback","startsWith","eventName","EventPart","endsWith","BooleanAttributePart","PropertyPart","listener","previous","_listener","removeEventListener","normalizeProperties","output","p","PropertiesMixin","superClass","superPropertiesClass","constructor","superCtor","getPrototypeOf","ownProperties","hasOwnProperty","properties","__ownProperties","finalize","_enableProperties","__finalized","_finalizeClass","createProperties","info","_properties","keys","attributeNameForProperty","__properties","assign","microtask","microTask","PropertiesChanged","readOnly","_addPropertyToAttributeMap","__dataHasAccessor","_definePropertyAccessor","__dataAttributes","attr","defineProperty","_setProperty","proto","_createPropertyAccessor","toLowerCase","__dataEnabled","__dataReady","__dataInvalid","__data","__dataPending","__dataOld","__dataInstanceProps","__serializing","_initializeProperties","_flushProperties","_setPendingProperty","ext","changed","_shouldPropertyChange","run","_initializeInstanceProperties","ready","_shouldPropertiesChange","_propertiesChanged","currentProps","oldProps","Boolean","namespace","_attributeToProperty","_deserializeValue","typeForProperty","_valueToNodeAttribute","_serializeValue","toString","microtaskCurrHandle","microtaskLastHandle","microtaskCallbacks","microtaskNodeContent","microtaskNode","MutationObserver","microtaskFlush","observe","characterData","len","cb","setTimeout","splice","timeOut","after","delay","fn","cancel","handle","clearTimeout","animationFrame","requestAnimationFrame","cancelAnimationFrame","idlePeriod","requestIdleCallback","cancelIdleCallback","callback","idx","dashToCamelCase","camelToDashCase","caseMap","DASH_TO_CAMEL","CAMEL_TO_DASH","dash","replace","m","toUpperCase","camel","shadyTemplateFactory","scopeName","cacheKey","ShadyCSS","prepareTemplate"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap b38b6420749c17f58f52","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nwindow.JSCompiler_renameProperty = function(prop, obj) { return prop; }\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/@polymer/polymer/lib/utils/boot.js","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n// The first argument to JS template tags retain identity across multiple\n// calls to a tag for the same literal, so we can cache work done per literal\n// in a Map.\nexport const templateCaches = new Map();\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html');\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg');\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, partCallback = defaultPartCallback) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.partCallback = partCallback;\n    }\n    /**\n     * Returns a string of HTML used to create a <template> element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isTextBinding = true;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            html += s;\n            // We're in a text position if the previous string closed its tags.\n            // If it doesn't have any tags, then we use the previous text position\n            // state.\n            const closing = findTagClose(s);\n            isTextBinding = closing > -1 ? closing < s.length : isTextBinding;\n            html += isTextBinding ? nodeMarker : marker;\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTMl in an <svg> tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the <svg> tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function defaultTemplateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = new Map();\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.get(result.strings);\n    if (template === undefined) {\n        template = new Template(result, result.getTemplateElement());\n        templateCache.set(result.strings, template);\n    }\n    return template;\n}\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param templateFactory a function to create a Template or retreive one from\n *     cache.\n */\nexport function render(result, container, templateFactory = defaultTemplateFactory) {\n    const template = templateFactory(result);\n    let instance = container.__templateInstance;\n    // Repeat render, just call update()\n    if (instance !== undefined && instance.template === template &&\n        instance._partCallback === result.partCallback) {\n        instance.update(result.values);\n        return;\n    }\n    // First render, create a new TemplateInstance and append it\n    instance =\n        new TemplateInstance(template, result.partCallback, templateFactory);\n    container.__templateInstance = instance;\n    const fragment = instance._clone();\n    instance.update(result.values);\n    removeNodes(container, container.firstChild);\n    container.appendChild(fragment);\n}\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nconst marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-posisitions, not attribute positions,\n * in template.\n */\nconst nodeMarker = `<!--${marker}-->`;\nconst markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#attributes-0\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-character\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nconst lastAttributeNameRegex = /[ \\x09\\x0a\\x0c\\x0d]([^\\0-\\x1F\\x7F-\\x9F \\x09\\x0a\\x0c\\x0d\"'>=/]+)[ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*)$/;\n/**\n * Finds the closing index of the last closed HTML tag.\n * This has 3 possible return values:\n *   - `-1`, meaning there is no tag in str.\n *   - `string.length`, meaning the last opened tag is unclosed.\n *   - Some positive number < str.length, meaning the index of the closing '>'.\n */\nfunction findTagClose(str) {\n    const close = str.lastIndexOf('>');\n    const open = str.indexOf('<', close + 1);\n    return open > -1 ? str.length : close;\n}\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\nexport class TemplatePart {\n    constructor(type, index, name, rawName, strings) {\n        this.type = type;\n        this.index = index;\n        this.name = name;\n        this.rawName = rawName;\n        this.strings = strings;\n    }\n}\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const content = this.element.content;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(content, 133 /* NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT |\n               NodeFilter.SHOW_TEXT */, null, false);\n        let index = -1;\n        let partIndex = 0;\n        const nodesToRemove = [];\n        // The actual previous node, accounting for removals: if a node is removed\n        // it will never be the previousNode.\n        let previousNode;\n        // Used to set previousNode at the top of the loop.\n        let currentNode;\n        while (walker.nextNode()) {\n            index++;\n            previousNode = currentNode;\n            const node = currentNode = walker.currentNode;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (!node.hasAttributes()) {\n                    continue;\n                }\n                const attributes = node.attributes;\n                // Per https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                // attributes are not guaranteed to be returned in document order. In\n                // particular, Edge/IE can return them out of order, so we cannot assume\n                // a correspondance between part index and attribute index.\n                let count = 0;\n                for (let i = 0; i < attributes.length; i++) {\n                    if (attributes[i].value.indexOf(marker) >= 0) {\n                        count++;\n                    }\n                }\n                while (count-- > 0) {\n                    // Get the template literal section leading up to the first\n                    // expression in this attribute attribute\n                    const stringForPart = result.strings[partIndex];\n                    // Find the attribute name\n                    const attributeNameInPart = lastAttributeNameRegex.exec(stringForPart)[1];\n                    // Find the corresponding attribute\n                    const attribute = attributes.getNamedItem(attributeNameInPart);\n                    const stringsForAttributeValue = attribute.value.split(markerRegex);\n                    this.parts.push(new TemplatePart('attribute', index, attribute.name, attributeNameInPart, stringsForAttributeValue));\n                    node.removeAttribute(attribute.name);\n                    partIndex += stringsForAttributeValue.length - 1;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const nodeValue = node.nodeValue;\n                if (nodeValue.indexOf(marker) < 0) {\n                    continue;\n                }\n                const parent = node.parentNode;\n                const strings = nodeValue.split(markerRegex);\n                const lastIndex = strings.length - 1;\n                // We have a part for each match found\n                partIndex += lastIndex;\n                // We keep this current node, but reset its content to the last\n                // literal part. We insert new literal nodes before this so that the\n                // tree walker keeps its position correctly.\n                node.textContent = strings[lastIndex];\n                // Generate a new text node for each literal section\n                // These nodes are also used as the markers for node parts\n                for (let i = 0; i < lastIndex; i++) {\n                    parent.insertBefore(document.createTextNode(strings[i]), node);\n                    this.parts.push(new TemplatePart('node', index++));\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */ &&\n                node.nodeValue === marker) {\n                const parent = node.parentNode;\n                // Add a new marker node to be the startNode of the Part if any of the\n                // following are true:\n                //  * We don't have a previousSibling\n                //  * previousSibling is being removed (thus it's not the\n                //    `previousNode`)\n                //  * previousSibling is not a Text node\n                //\n                // TODO(justinfagnani): We should be able to use the previousNode here\n                // as the marker node and reduce the number of extra nodes we add to a\n                // template. See https://github.com/PolymerLabs/lit-html/issues/147\n                const previousSibling = node.previousSibling;\n                if (previousSibling === null || previousSibling !== previousNode ||\n                    previousSibling.nodeType !== Node.TEXT_NODE) {\n                    parent.insertBefore(document.createTextNode(''), node);\n                }\n                else {\n                    index--;\n                }\n                this.parts.push(new TemplatePart('node', index++));\n                nodesToRemove.push(node);\n                // If we don't have a nextSibling add a marker node.\n                // We don't have to check if the next node is going to be removed,\n                // because that node will induce a new marker if so.\n                if (node.nextSibling === null) {\n                    parent.insertBefore(document.createTextNode(''), node);\n                }\n                else {\n                    index--;\n                }\n                currentNode = previousNode;\n                partIndex++;\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\n/**\n * Returns a value ready to be inserted into a Part from a user-provided value.\n *\n * If the user value is a directive, this invokes the directive with the given\n * part. If the value is null, it's converted to undefined to work better\n * with certain DOM APIs, like textContent.\n */\nexport const getValue = (part, value) => {\n    // `null` as the value of a Text node will render the string 'null'\n    // so we convert it to undefined\n    if (isDirective(value)) {\n        value = value(part);\n        return directiveValue;\n    }\n    return value === null ? undefined : value;\n};\nexport const directive = (f) => {\n    f.__litDirective = true;\n    return f;\n};\nconst isDirective = (o) => typeof o === 'function' && o.__litDirective === true;\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const directiveValue = {};\nconst isPrimitiveValue = (value) => value === null ||\n    !(typeof value === 'object' || typeof value === 'function');\nexport class AttributePart {\n    constructor(instance, element, name, strings) {\n        this.instance = instance;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.size = strings.length - 1;\n        this._previousValues = [];\n    }\n    _interpolate(values, startIndex) {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const v = getValue(this, values[startIndex + i]);\n            if (v && v !== directiveValue &&\n                (Array.isArray(v) || typeof v !== 'string' && v[Symbol.iterator])) {\n                for (const t of v) {\n                    // TODO: we need to recursively call getValue into iterables...\n                    text += t;\n                }\n            }\n            else {\n                text += v;\n            }\n        }\n        return text + strings[l];\n    }\n    _equalToPreviousValues(values, startIndex) {\n        for (let i = startIndex; i < startIndex + this.size; i++) {\n            if (this._previousValues[i] !== values[i] ||\n                !isPrimitiveValue(values[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    setValue(values, startIndex) {\n        if (this._equalToPreviousValues(values, startIndex)) {\n            return;\n        }\n        const s = this.strings;\n        let value;\n        if (s.length === 2 && s[0] === '' && s[1] === '') {\n            // An expression that occupies the whole attribute value will leave\n            // leading and trailing empty strings.\n            value = getValue(this, values[startIndex]);\n            if (Array.isArray(value)) {\n                value = value.join('');\n            }\n        }\n        else {\n            value = this._interpolate(values, startIndex);\n        }\n        if (value !== directiveValue) {\n            this.element.setAttribute(this.name, value);\n        }\n        this._previousValues = values;\n    }\n}\nexport class NodePart {\n    constructor(instance, startNode, endNode) {\n        this.instance = instance;\n        this.startNode = startNode;\n        this.endNode = endNode;\n        this._previousValue = undefined;\n    }\n    setValue(value) {\n        value = getValue(this, value);\n        if (value === directiveValue) {\n            return;\n        }\n        if (isPrimitiveValue(value)) {\n            // Handle primitive values\n            // If the value didn't change, do nothing\n            if (value === this._previousValue) {\n                return;\n            }\n            this._setText(value);\n        }\n        else if (value instanceof TemplateResult) {\n            this._setTemplateResult(value);\n        }\n        else if (Array.isArray(value) || value[Symbol.iterator]) {\n            this._setIterable(value);\n        }\n        else if (value instanceof Node) {\n            this._setNode(value);\n        }\n        else if (value.then !== undefined) {\n            this._setPromise(value);\n        }\n        else {\n            // Fallback, will render the string representation\n            this._setText(value);\n        }\n    }\n    _insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    _setNode(value) {\n        if (this._previousValue === value) {\n            return;\n        }\n        this.clear();\n        this._insert(value);\n        this._previousValue = value;\n    }\n    _setText(value) {\n        const node = this.startNode.nextSibling;\n        value = value === undefined ? '' : value;\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === Node.TEXT_NODE) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if _previousValue is\n            // primitive?\n            node.textContent = value;\n        }\n        else {\n            this._setNode(document.createTextNode(value));\n        }\n        this._previousValue = value;\n    }\n    _setTemplateResult(value) {\n        const template = this.instance._getTemplate(value);\n        let instance;\n        if (this._previousValue && this._previousValue.template === template) {\n            instance = this._previousValue;\n        }\n        else {\n            instance = new TemplateInstance(template, this.instance._partCallback, this.instance._getTemplate);\n            this._setNode(instance._clone());\n            this._previousValue = instance;\n        }\n        instance.update(value.values);\n    }\n    _setIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _previousValue is an array, then the previous render was of an\n        // iterable and _previousValue will contain the NodeParts from the previous\n        // render. If _previousValue is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this._previousValue)) {\n            this.clear();\n            this._previousValue = [];\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this._previousValue;\n        let partIndex = 0;\n        for (const item of value) {\n            // Try to reuse an existing part\n            let itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                // If we're creating the first item part, it's startNode should be the\n                // container's startNode\n                let itemStart = this.startNode;\n                // If we're not creating the first part, create a new separator marker\n                // node, and fix up the previous part's endNode to point to it\n                if (partIndex > 0) {\n                    const previousPart = itemParts[partIndex - 1];\n                    itemStart = previousPart.endNode = document.createTextNode('');\n                    this._insert(itemStart);\n                }\n                itemPart = new NodePart(this.instance, itemStart, this.endNode);\n                itemParts.push(itemPart);\n            }\n            itemPart.setValue(item);\n            partIndex++;\n        }\n        if (partIndex === 0) {\n            this.clear();\n            this._previousValue = undefined;\n        }\n        else if (partIndex < itemParts.length) {\n            const lastPart = itemParts[partIndex - 1];\n            // Truncate the parts array so _previousValue reflects the current state\n            itemParts.length = partIndex;\n            this.clear(lastPart.endNode.previousSibling);\n            lastPart.endNode = this.endNode;\n        }\n    }\n    _setPromise(value) {\n        this._previousValue = value;\n        value.then((v) => {\n            if (this._previousValue === value) {\n                this.setValue(v);\n            }\n        });\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\nexport const defaultPartCallback = (instance, templatePart, node) => {\n    if (templatePart.type === 'attribute') {\n        return new AttributePart(instance, node, templatePart.name, templatePart.strings);\n    }\n    else if (templatePart.type === 'node') {\n        return new NodePart(instance, node, node.nextSibling);\n    }\n    throw new Error(`Unknown part type ${templatePart.type}`);\n};\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, partCallback, getTemplate) {\n        this._parts = [];\n        this.template = template;\n        this._partCallback = partCallback;\n        this._getTemplate = getTemplate;\n    }\n    update(values) {\n        let valueIndex = 0;\n        for (const part of this._parts) {\n            if (part.size === undefined) {\n                part.setValue(values[valueIndex]);\n                valueIndex++;\n            }\n            else {\n                part.setValue(values, valueIndex);\n                valueIndex += part.size;\n            }\n        }\n    }\n    _clone() {\n        const fragment = document.importNode(this.template.element.content, true);\n        const parts = this.template.parts;\n        if (parts.length > 0) {\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT |\n                   NodeFilter.SHOW_TEXT */, null, false);\n            let index = -1;\n            for (let i = 0; i < parts.length; i++) {\n                const part = parts[i];\n                while (index < part.index) {\n                    index++;\n                    walker.nextNode();\n                }\n                this._parts.push(this._partCallback(this, part, walker.currentNode));\n            }\n        }\n        return fragment;\n    }\n}\n/**\n * Reparents nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), into another container (could be the same container), before\n * `beforeNode`. If `beforeNode` is null, it appends the nodes to the\n * container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    let node = start;\n    while (node !== end) {\n        const n = node.nextSibling;\n        container.insertBefore(node, before);\n        node = n;\n    }\n};\n/**\n * Removes nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), from `container`.\n */\nexport const removeNodes = (container, startNode, endNode = null) => {\n    let node = startNode;\n    while (node !== endNode) {\n        const n = node.nextSibling;\n        container.removeChild(node);\n        node = n;\n    }\n};\n//# sourceMappingURL=lit-html.js.map\n\n\n// WEBPACK FOOTER //\n// ./node_modules/lit-html/lit-html.js","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\n// unique global id for deduping mixins.\nlet dedupeId = 0;\n\n/**\n * @constructor\n * @extends {Function}\n */\nfunction MixinFunction(){}\n/** @type {(WeakMap | undefined)} */\nMixinFunction.prototype.__mixinApplications;\n/** @type {(Object | undefined)} */\nMixinFunction.prototype.__mixinSet;\n\n/* eslint-disable valid-jsdoc */\n/**\n * Wraps an ES6 class expression mixin such that the mixin is only applied\n * if it has not already been applied its base argument. Also memoizes mixin\n * applications.\n *\n * @template T\n * @param {T} mixin ES6 class expression mixin to wrap\n * @return {T}\n * @suppress {invalidCasts}\n */\nexport const dedupingMixin = function(mixin) {\n  let mixinApplications = /** @type {!MixinFunction} */(mixin).__mixinApplications;\n  if (!mixinApplications) {\n    mixinApplications = new WeakMap();\n    /** @type {!MixinFunction} */(mixin).__mixinApplications = mixinApplications;\n  }\n  // maintain a unique id for each mixin\n  let mixinDedupeId = dedupeId++;\n  function dedupingMixin(base) {\n    let baseSet = /** @type {!MixinFunction} */(base).__mixinSet;\n    if (baseSet && baseSet[mixinDedupeId]) {\n      return base;\n    }\n    let map = mixinApplications;\n    let extended = map.get(base);\n    if (!extended) {\n      extended = /** @type {!Function} */(mixin)(base);\n      map.set(base, extended);\n    }\n    // copy inherited mixin set from the extended class, or the base class\n    // NOTE: we avoid use of Set here because some browser (IE11)\n    // cannot extend a base Set via the constructor.\n    let mixinSet = Object.create(/** @type {!MixinFunction} */(extended).__mixinSet || baseSet || null);\n    mixinSet[mixinDedupeId] = true;\n    /** @type {!MixinFunction} */(extended).__mixinSet = mixinSet;\n    return extended;\n  }\n\n  return /** @type {T} */ (dedupingMixin);\n};\n/* eslint-enable valid-jsdoc */\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/@polymer/polymer/lib/utils/mixin.js","import {LitElement, html} from '@polymer/lit-element';\r\n\r\nclass LitTest extends LitElement {\r\n\r\n  // Public property API that triggers re-render (synced with attributes)\r\n  static get properties() {\r\n    return {\r\n      foo: String,\r\n      whales: Number\r\n    }\r\n  }\r\n\r\n  constructor() {\r\n    super();\r\n    this.foo = 'foo';\r\n    this.addEventListener('click', async (e) => {\r\n      this.whales++;\r\n      await this.renderComplete;\r\n      this.dispatchEvent(new CustomEvent('whales', {detail: {whales: this.whales}}))\r\n    });\r\n  }\r\n\r\n  // Render method should return a `TemplateResult` using the provided lit-html `html` tag function\r\n  render({foo, whales}) {\r\n    return html`\r\n      <style>\r\n        :host {\r\n          display: block;\r\n        }\r\n      </style>\r\n      <h4>Foo: ${foo}</h4>\r\n      <div>whales: ${'🐳'.repeat(whales)}</div>\r\n      <slot></slot>\r\n    `;\r\n  }\r\n}\r\n\r\ncustomElements.define('lit-test', LitTest);\n\n\n// WEBPACK FOOTER //\n// ./lit-test.js","import { PropertiesMixin } from '@polymer/polymer/lib/mixins/properties-mixin.js';\nimport { camelToDashCase } from '@polymer/polymer/lib/utils/case-map.js';\nimport { render } from 'lit-html/lib/shady-render.js';\nexport { html } from 'lit-html/lib/lit-extended.js';\n/**\n * Renders attributes to the given element based on the `attrInfo` object where\n * boolean values are added/removed as attributes.\n * @param element Element on which to set attributes.\n * @param attrInfo Object describing attributes.\n */\nexport function renderAttributes(element, attrInfo) {\n    for (const a in attrInfo) {\n        const v = attrInfo[a] === true ? '' : attrInfo[a];\n        if (v || v === '' || v === 0) {\n            if (element.getAttribute(a) !== v) {\n                element.setAttribute(a, v);\n            }\n        }\n        else if (element.hasAttribute(a)) {\n            element.removeAttribute(a);\n        }\n    }\n}\n/**\n * Returns a string of css class names formed by taking the properties\n * in the `classInfo` object and appending the property name to the string of\n * class names if the property value is truthy.\n * @param classInfo\n */\nexport function classString(classInfo) {\n    const o = [];\n    for (const name in classInfo) {\n        const v = classInfo[name];\n        if (v) {\n            o.push(name);\n        }\n    }\n    return o.join(' ');\n}\n/**\n * Returns a css style string formed by taking the properties in the `styleInfo`\n * object and appending the property name (dash-cased) colon the\n * property value. Properties are separated by a semi-colon.\n * @param styleInfo\n */\nexport function styleString(styleInfo) {\n    const o = [];\n    for (const name in styleInfo) {\n        const v = styleInfo[name];\n        if (v || v === 0) {\n            o.push(`${camelToDashCase(name)}: ${v}`);\n        }\n    }\n    return o.join('; ');\n}\nexport class LitElement extends PropertiesMixin(HTMLElement) {\n    constructor() {\n        super(...arguments);\n        this.__renderComplete = null;\n        this.__resolveRenderComplete = null;\n        this.__isInvalid = false;\n        this.__isChanging = false;\n    }\n    ready() {\n        this._root = this._createRoot();\n        super.ready();\n    }\n    /**\n     * Returns an\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    _createRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Override which always returns true so that `_propertiesChanged`\n     * is called whenver properties are invalidated. This ensures `render`\n     * is always called in response to `invalidate`.\n     * @param _props Current element properties\n     * @param _changedProps Changing element properties\n     * @param _prevProps Previous element properties\n     * @returns {boolean} Default implementation always returns true.\n     */\n    _shouldPropertiesChange(_props, _changedProps, _prevProps) {\n        return true;\n    }\n    /**\n     * Override which always calls `render` and `didRender` to perform\n     * element rendering.\n     * @param props Current element properties\n     * @param changedProps Changing element properties\n     * @param prevProps Previous element properties\n     */\n    _propertiesChanged(props, changedProps, prevProps) {\n        this.__isChanging = true;\n        this.__isInvalid = false;\n        super._propertiesChanged(props, changedProps, prevProps);\n        const result = this.render(props);\n        if (result && this._root !== undefined) {\n            render(result, this._root, this.localName);\n        }\n        this.didRender(props, changedProps, prevProps);\n        if (this.__resolveRenderComplete) {\n            this.__resolveRenderComplete();\n        }\n        this.__isChanging = false;\n    }\n    _shouldPropertyChange(property, value, old) {\n        const change = super._shouldPropertyChange(property, value, old);\n        if (change && this.__isChanging) {\n            console.trace(`Setting properties in response to other properties changing ` +\n                `considered harmful. Setting '${property}' from ` +\n                `'${this._getProperty(property)}' to '${value}'.`);\n        }\n        return change;\n    }\n    /**\n     * Returns a lit-html TemplateResult which is rendered into the element's\n     * shadowRoot. This method must be implemented.\n     * @param {*} _props Current element properties\n     * @returns {TemplateResult} Must return a lit-html TemplateResult.\n     */\n    render(_props) {\n        throw new Error('render() not implemented');\n    }\n    /**\n     * Called after element dom has been rendered. Implement to\n     * directly access element DOM.\n     * @param _props Current element properties\n     * @param _changedProps Changing element properties\n     * @param _prevProps Previous element properties\n     */\n    didRender(_props, _changedProps, _prevProps) { }\n    /**\n     * Provokes the element to asynchronously re-render.\n     */\n    invalidate() { this._invalidateProperties(); }\n    /**\n     * Override which provides tracking of invalidated state.\n     */\n    _invalidateProperties() {\n        this.__isInvalid = true;\n        super._invalidateProperties();\n    }\n    /**\n     * Returns a promise which resolves after the element next renders.\n     */\n    get renderComplete() {\n        if (!this.__renderComplete) {\n            // TODO(sorvell): handle rejected render.\n            this.__renderComplete = new Promise((resolve) => {\n                this.__resolveRenderComplete =\n                    () => {\n                        this.__resolveRenderComplete = this.__renderComplete = null;\n                        resolve();\n                    };\n            });\n            if (!this.__isInvalid && this.__resolveRenderComplete) {\n                this.__resolveRenderComplete();\n            }\n        }\n        return this.__renderComplete;\n    }\n}\n//# sourceMappingURL=lit-element.js.map\n\n\n// WEBPACK FOOTER //\n// ./node_modules/@polymer/lit-element/lit-element.js","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributePart, defaultPartCallback, directiveValue, getValue, SVGTemplateResult, TemplateResult } from '../lit-html.js';\nexport { render } from '../lit-html.js';\n/**\n * Interprets a template literal as a lit-extended HTML template.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', extendedPartCallback);\n/**\n * Interprets a template literal as a lit-extended SVG template.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', extendedPartCallback);\n/**\n * A PartCallback which allows templates to set properties and declarative\n * event handlers.\n *\n * Properties are set by default, instead of attributes. Attribute names in\n * lit-html templates preserve case, so properties are case sensitive. If an\n * expression takes up an entire attribute value, then the property is set to\n * that value. If an expression is interpolated with a string or other\n * expressions then the property is set to the string result of the\n * interpolation.\n *\n * To set an attribute instead of a property, append a `$` suffix to the\n * attribute name.\n *\n * Example:\n *\n *     html`<button class$=\"primary\">Buy Now</button>`\n *\n * To set an event handler, prefix the attribute name with `on-`:\n *\n * Example:\n *\n *     html`<button on-click=${(e)=> this.onClickHandler(e)}>Buy Now</button>`\n *\n */\nexport const extendedPartCallback = (instance, templatePart, node) => {\n    if (templatePart.type === 'attribute') {\n        if (templatePart.rawName.startsWith('on-')) {\n            const eventName = templatePart.rawName.slice(3);\n            return new EventPart(instance, node, eventName);\n        }\n        if (templatePart.name.endsWith('$')) {\n            const name = templatePart.name.slice(0, -1);\n            return new AttributePart(instance, node, name, templatePart.strings);\n        }\n        if (templatePart.name.endsWith('?')) {\n            const name = templatePart.name.slice(0, -1);\n            return new BooleanAttributePart(instance, node, name, templatePart.strings);\n        }\n        return new PropertyPart(instance, node, templatePart.rawName, templatePart.strings);\n    }\n    return defaultPartCallback(instance, templatePart, node);\n};\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart extends AttributePart {\n    setValue(values, startIndex) {\n        const s = this.strings;\n        if (s.length === 2 && s[0] === '' && s[1] === '') {\n            const value = getValue(this, values[startIndex]);\n            if (value === directiveValue) {\n                return;\n            }\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n        }\n        else {\n            throw new Error('boolean attributes can only contain a single expression');\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n    setValue(values, startIndex) {\n        const s = this.strings;\n        let value;\n        if (this._equalToPreviousValues(values, startIndex)) {\n            return;\n        }\n        if (s.length === 2 && s[0] === '' && s[1] === '') {\n            // An expression that occupies the whole attribute value will leave\n            // leading and trailing empty strings.\n            value = getValue(this, values[startIndex]);\n        }\n        else {\n            // Interpolation, so interpolate\n            value = this._interpolate(values, startIndex);\n        }\n        if (value !== directiveValue) {\n            this.element[this.name] = value;\n        }\n        this._previousValues = values;\n    }\n}\nexport class EventPart {\n    constructor(instance, element, eventName) {\n        this.instance = instance;\n        this.element = element;\n        this.eventName = eventName;\n    }\n    setValue(value) {\n        const listener = getValue(this, value);\n        const previous = this._listener;\n        if (listener === previous) {\n            return;\n        }\n        this._listener = listener;\n        if (previous != null) {\n            this.element.removeEventListener(this.eventName, previous);\n        }\n        if (listener != null) {\n            this.element.addEventListener(this.eventName, listener);\n        }\n    }\n}\n//# sourceMappingURL=lit-extended.js.map\n\n\n// WEBPACK FOOTER //\n// ./node_modules/lit-html/lib/lit-extended.js","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { PropertiesChanged } from './properties-changed.js';\n\n/**\n * Creates a copy of `props` with each property normalized such that\n * upgraded it is an object with at least a type property { type: Type}.\n *\n * @param {Object} props Properties to normalize\n * @return {Object} Copy of input `props` with normalized properties that\n * are in the form {type: Type}\n * @private\n */\nfunction normalizeProperties(props) {\n  const output = {};\n  for (let p in props) {\n    const o = props[p];\n    output[p] = (typeof o === 'function') ? {type: o} : o;\n  }\n  return output;\n}\n\n/**\n * Mixin that provides a minimal starting point to using the PropertiesChanged\n * mixin by providing a mechanism to declare properties in a static\n * getter (e.g. static get properties() { return { foo: String } }). Changes\n * are reported via the `_propertiesChanged` method.\n *\n * This mixin provides no specific support for rendering. Users are expected\n * to create a ShadowRoot and put content into it and update it in whatever\n * way makes sense. This can be done in reaction to properties changing by\n * implementing `_propertiesChanged`.\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin PropertiesChanged\n * @summary Mixin that provides a minimal starting point for using\n * the PropertiesChanged mixin by providing a declarative `properties` object.\n */\nexport const PropertiesMixin = dedupingMixin(superClass => {\n\n /**\n  * @constructor\n  * @extends {superClass}\n  * @implements {Polymer_PropertiesChanged}\n  */\n const base = PropertiesChanged(superClass);\n\n /**\n  * Returns the super class constructor for the given class, if it is an\n  * instance of the PropertiesMixin.\n  *\n  * @param {!PropertiesMixinConstructor} constructor PropertiesMixin constructor\n  * @return {PropertiesMixinConstructor} Super class constructor\n  */\n function superPropertiesClass(constructor) {\n   const superCtor = Object.getPrototypeOf(constructor);\n\n   // Note, the `PropertiesMixin` class below only refers to the class\n   // generated by this call to the mixin; the instanceof test only works\n   // because the mixin is deduped and guaranteed only to apply once, hence\n   // all constructors in a proto chain will see the same `PropertiesMixin`\n   return (superCtor.prototype instanceof PropertiesMixin) ?\n     /** @type {PropertiesMixinConstructor} */ (superCtor) : null;\n }\n\n /**\n  * Returns a memoized version of the `properties` object for the\n  * given class. Properties not in object format are converted to at\n  * least {type}.\n  *\n  * @param {PropertiesMixinConstructor} constructor PropertiesMixin constructor\n  * @return {Object} Memoized properties object\n  */\n function ownProperties(constructor) {\n   if (!constructor.hasOwnProperty(JSCompiler_renameProperty('__ownProperties', constructor))) {\n     let props = null;\n\n     if (constructor.hasOwnProperty(JSCompiler_renameProperty('properties', constructor)) && constructor.properties) {\n       props = normalizeProperties(constructor.properties);\n     }\n\n     constructor.__ownProperties = props;\n   }\n   return constructor.__ownProperties;\n }\n\n /**\n  * @polymer\n  * @mixinClass\n  * @extends {base}\n  * @implements {Polymer_PropertiesMixin}\n  * @unrestricted\n  */\n class PropertiesMixin extends base {\n\n   /**\n    * Implements standard custom elements getter to observes the attributes\n    * listed in `properties`.\n    * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n    */\n   static get observedAttributes() {\n     const props = this._properties;\n     return props ? Object.keys(props).map(p => this.attributeNameForProperty(p)) : [];\n   }\n\n   /**\n    * Finalizes an element definition, including ensuring any super classes\n    * are also finalized. This includes ensuring property\n    * accessors exist on the element prototype. This method calls\n    * `_finalizeClass` to finalize each constructor in the prototype chain.\n    * @return {void}\n    */\n   static finalize() {\n     if (!this.hasOwnProperty(JSCompiler_renameProperty('__finalized', this))) {\n       const superCtor = superPropertiesClass(/** @type {PropertiesMixinConstructor} */(this));\n       if (superCtor) {\n         superCtor.finalize();\n       }\n       this.__finalized = true;\n       this._finalizeClass();\n     }\n   }\n\n   /**\n    * Finalize an element class. This includes ensuring property\n    * accessors exist on the element prototype. This method is called by\n    * `finalize` and finalizes the class constructor.\n    *\n    * @protected\n    */\n   static _finalizeClass() {\n     const props = ownProperties(/** @type {PropertiesMixinConstructor} */(this));\n     if (props) {\n       this.createProperties(props);\n     }\n   }\n\n   /**\n    * Returns a memoized version of all properties, including those inherited\n    * from super classes. Properties not in object format are converted to\n    * at least {type}.\n    *\n    * @return {Object} Object containing properties for this class\n    * @protected\n    */\n   static get _properties() {\n     if (!this.hasOwnProperty(\n       JSCompiler_renameProperty('__properties', this))) {\n       const superCtor = superPropertiesClass(/** @type {PropertiesMixinConstructor} */(this));\n       this.__properties = Object.assign({},\n         superCtor && superCtor._properties,\n         ownProperties(/** @type {PropertiesMixinConstructor} */(this)));\n     }\n     return this.__properties;\n   }\n\n   /**\n    * Overrides `PropertiesChanged` method to return type specified in the\n    * static `properties` object for the given property.\n    * @param {string} name Name of property\n    * @return {*} Type to which to deserialize attribute\n    *\n    * @protected\n    */\n   static typeForProperty(name) {\n     const info = this._properties[name];\n     return info && info.type;\n   }\n\n   /**\n    * Overrides `PropertiesChanged` method and adds a call to\n    * `finalize` which lazily configures the element's property accessors.\n    * @override\n    * @return {void}\n    */\n   _initializeProperties() {\n     this.constructor.finalize();\n     super._initializeProperties();\n   }\n\n   /**\n    * Called when the element is added to a document.\n    * Calls `_enableProperties` to turn on property system from\n    * `PropertiesChanged`.\n    * @suppress {missingProperties} Super may or may not implement the callback\n    * @return {void}\n    */\n   connectedCallback() {\n     if (super.connectedCallback) {\n       super.connectedCallback();\n     }\n     this._enableProperties();\n   }\n\n   /**\n    * Called when the element is removed from a document\n    * @suppress {missingProperties} Super may or may not implement the callback\n    * @return {void}\n    */\n   disconnectedCallback() {\n     if (super.disconnectedCallback) {\n       super.disconnectedCallback();\n     }\n   }\n\n }\n\n return PropertiesMixin;\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/@polymer/polymer/lib/mixins/properties-mixin.js","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { microTask } from '../utils/async.js';\n\n/** @const {!AsyncInterface} */\nconst microtask = microTask;\n\n/**\n * Element class mixin that provides basic meta-programming for creating one\n * or more property accessors (getter/setter pair) that enqueue an async\n * (batched) `_propertiesChanged` callback.\n *\n * For basic usage of this mixin, call `MyClass.createProperties(props)`\n * once at class definition time to create property accessors for properties\n * named in props, implement `_propertiesChanged` to react as desired to\n * property changes, and implement `static get observedAttributes()` and\n * include lowercase versions of any property names that should be set from\n * attributes. Last, call `this._enableProperties()` in the element's\n * `connectedCallback` to enable the accessors.\n *\n * @mixinFunction\n * @polymer\n * @summary Element class mixin for reacting to property changes from\n *   generated property accessors.\n */\nexport const PropertiesChanged = dedupingMixin(superClass => {\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @extends {superClass}\n   * @implements {Polymer_PropertiesChanged}\n   * @unrestricted\n   */\n  class PropertiesChanged extends superClass {\n\n    /**\n     * Creates property accessors for the given property names.\n     * @param {!Object} props Object whose keys are names of accessors.\n     * @return {void}\n     * @protected\n     */\n    static createProperties(props) {\n      const proto = this.prototype;\n      for (let prop in props) {\n        // don't stomp an existing accessor\n        if (!(prop in proto)) {\n          proto._createPropertyAccessor(prop);\n        }\n      }\n    }\n\n    /**\n     * Returns an attribute name that corresponds to the given property.\n     * The attribute name is the lowercased property name. Override to\n     * customize this mapping.\n     * @param {string} property Property to convert\n     * @return {string} Attribute name corresponding to the given property.\n     *\n     * @protected\n     */\n    static attributeNameForProperty(property) {\n      return property.toLowerCase();\n    }\n\n    /**\n     * Override point to provide a type to which to deserialize a value to\n     * a given property.\n     * @param {string} name Name of property\n     *\n     * @protected\n     */\n    static typeForProperty(name) { } //eslint-disable-line no-unused-vars\n\n    /**\n     * Creates a setter/getter pair for the named property with its own\n     * local storage.  The getter returns the value in the local storage,\n     * and the setter calls `_setProperty`, which updates the local storage\n     * for the property and enqueues a `_propertiesChanged` callback.\n     *\n     * This method may be called on a prototype or an instance.  Calling\n     * this method may overwrite a property value that already exists on\n     * the prototype/instance by creating the accessor.\n     *\n     * @param {string} property Name of the property\n     * @param {boolean=} readOnly When true, no setter is created; the\n     *   protected `_setProperty` function must be used to set the property\n     * @return {void}\n     * @protected\n     */\n    _createPropertyAccessor(property, readOnly) {\n      this._addPropertyToAttributeMap(property);\n      if (!this.hasOwnProperty('__dataHasAccessor')) {\n        this.__dataHasAccessor = Object.assign({}, this.__dataHasAccessor);\n      }\n      if (!this.__dataHasAccessor[property]) {\n        this.__dataHasAccessor[property] = true;\n        this._definePropertyAccessor(property, readOnly);\n      }\n    }\n\n    /**\n     * Adds the given `property` to a map matching attribute names\n     * to property names, using `attributeNameForProperty`. This map is\n     * used when deserializing attribute values to properties.\n     *\n     * @param {string} property Name of the property\n     */\n    _addPropertyToAttributeMap(property) {\n      if (!this.hasOwnProperty('__dataAttributes')) {\n        this.__dataAttributes = Object.assign({}, this.__dataAttributes);\n      }\n      if (!this.__dataAttributes[property]) {\n        const attr = this.constructor.attributeNameForProperty(property);\n        this.__dataAttributes[attr] = property;\n      }\n    }\n\n    /**\n     * Defines a property accessor for the given property.\n     * @param {string} property Name of the property\n     * @param {boolean=} readOnly When true, no setter is created\n     * @return {void}\n     */\n     _definePropertyAccessor(property, readOnly) {\n      Object.defineProperty(this, property, {\n        /* eslint-disable valid-jsdoc */\n        /** @this {PropertiesChanged} */\n        get() {\n          return this._getProperty(property);\n        },\n        /** @this {PropertiesChanged} */\n        set: readOnly ? function () {} : function (value) {\n          this._setProperty(property, value);\n        }\n        /* eslint-enable */\n      });\n    }\n\n    constructor() {\n      super();\n      this.__dataEnabled = false;\n      this.__dataReady = false;\n      this.__dataInvalid = false;\n      this.__data = {};\n      this.__dataPending = null;\n      this.__dataOld = null;\n      this.__dataInstanceProps = null;\n      this.__serializing = false;\n      this._initializeProperties();\n    }\n\n    /**\n     * Lifecycle callback called when properties are enabled via\n     * `_enableProperties`.\n     *\n     * Users may override this function to implement behavior that is\n     * dependent on the element having its property data initialized, e.g.\n     * from defaults (initialized from `constructor`, `_initializeProperties`),\n     * `attributeChangedCallback`, or values propagated from host e.g. via\n     * bindings.  `super.ready()` must be called to ensure the data system\n     * becomes enabled.\n     *\n     * @return {void}\n     * @public\n     */\n    ready() {\n      this.__dataReady = true;\n      this._flushProperties();\n    }\n\n    /**\n     * Initializes the local storage for property accessors.\n     *\n     * Provided as an override point for performing any setup work prior\n     * to initializing the property accessor system.\n     *\n     * @return {void}\n     * @protected\n     */\n    _initializeProperties() {\n      // Capture instance properties; these will be set into accessors\n      // during first flush. Don't set them here, since we want\n      // these to overwrite defaults/constructor assignments\n      for (let p in this.__dataHasAccessor) {\n        if (this.hasOwnProperty(p)) {\n          this.__dataInstanceProps = this.__dataInstanceProps || {};\n          this.__dataInstanceProps[p] = this[p];\n          delete this[p];\n        }\n      }\n    }\n\n    /**\n     * Called at ready time with bag of instance properties that overwrote\n     * accessors when the element upgraded.\n     *\n     * The default implementation sets these properties back into the\n     * setter at ready time.  This method is provided as an override\n     * point for customizing or providing more efficient initialization.\n     *\n     * @param {Object} props Bag of property values that were overwritten\n     *   when creating property accessors.\n     * @return {void}\n     * @protected\n     */\n    _initializeInstanceProperties(props) {\n      Object.assign(this, props);\n    }\n\n    /**\n     * Updates the local storage for a property (via `_setPendingProperty`)\n     * and enqueues a `_proeprtiesChanged` callback.\n     *\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @return {void}\n     * @protected\n     */\n    _setProperty(property, value) {\n      if (this._setPendingProperty(property, value)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Returns the value for the given property.\n     * @param {string} property Name of property\n     * @return {*} Value for the given property\n     * @protected\n     */\n    _getProperty(property) {\n      return this.__data[property];\n    }\n\n    /* eslint-disable no-unused-vars */\n    /**\n     * Updates the local storage for a property, records the previous value,\n     * and adds it to the set of \"pending changes\" that will be passed to the\n     * `_propertiesChanged` callback.  This method does not enqueue the\n     * `_propertiesChanged` callback.\n     *\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @param {boolean=} ext Not used here; affordance for closure\n     * @return {boolean} Returns true if the property changed\n     * @protected\n     */\n    _setPendingProperty(property, value, ext) {\n      let old = this.__data[property];\n      let changed = this._shouldPropertyChange(property, value, old);\n      if (changed) {\n        if (!this.__dataPending) {\n          this.__dataPending = {};\n          this.__dataOld = {};\n        }\n        // Ensure old is captured from the last turn\n        if (this.__dataOld && !(property in this.__dataOld)) {\n          this.__dataOld[property] = old;\n        }\n        this.__data[property] = value;\n        this.__dataPending[property] = value;\n      }\n      return changed;\n    }\n    /* eslint-enable */\n\n    /**\n     * Marks the properties as invalid, and enqueues an async\n     * `_propertiesChanged` callback.\n     *\n     * @return {void}\n     * @protected\n     */\n    _invalidateProperties() {\n      if (!this.__dataInvalid && this.__dataReady) {\n        this.__dataInvalid = true;\n        microtask.run(() => {\n          if (this.__dataInvalid) {\n            this.__dataInvalid = false;\n            this._flushProperties();\n          }\n        });\n      }\n    }\n\n    /**\n     * Call to enable property accessor processing. Before this method is\n     * called accessor values will be set but side effects are\n     * queued. When called, any pending side effects occur immediately.\n     * For elements, generally `connectedCallback` is a normal spot to do so.\n     * It is safe to call this method multiple times as it only turns on\n     * property accessors once.\n     *\n     * @return {void}\n     * @protected\n     */\n    _enableProperties() {\n      if (!this.__dataEnabled) {\n        this.__dataEnabled = true;\n        if (this.__dataInstanceProps) {\n          this._initializeInstanceProperties(this.__dataInstanceProps);\n          this.__dataInstanceProps = null;\n        }\n        this.ready();\n      }\n    }\n\n    /**\n     * Calls the `_propertiesChanged` callback with the current set of\n     * pending changes (and old values recorded when pending changes were\n     * set), and resets the pending set of changes. Generally, this method\n     * should not be called in user code.\n     *\n     * @return {void}\n     * @protected\n     */\n    _flushProperties() {\n      const props = this.__data;\n      const changedProps = this.__dataPending;\n      const old = this.__dataOld;\n      if (this._shouldPropertiesChange(props, changedProps, old)) {\n        this.__dataPending = null;\n        this.__dataOld = null;\n        this._propertiesChanged(props, changedProps, old);\n      }\n    }\n\n    /**\n     * Called in `_flushProperties` to determine if `_propertiesChanged`\n     * should be called. The default implementation returns true if\n     * properties are pending. Override to customize when\n     * `_propertiesChanged` is called.\n     * @param {!Object} currentProps Bag of all current accessor values\n     * @param {!Object} changedProps Bag of properties changed since the last\n     *   call to `_propertiesChanged`\n     * @param {!Object} oldProps Bag of previous values for each property\n     *   in `changedProps`\n     * @return {boolean} true if changedProps is truthy\n     */\n    _shouldPropertiesChange(currentProps, changedProps, oldProps) { // eslint-disable-line no-unused-vars\n      return Boolean(changedProps);\n    }\n\n    /**\n     * Callback called when any properties with accessors created via\n     * `_createPropertyAccessor` have been set.\n     *\n     * @param {!Object} currentProps Bag of all current accessor values\n     * @param {!Object} changedProps Bag of properties changed since the last\n     *   call to `_propertiesChanged`\n     * @param {!Object} oldProps Bag of previous values for each property\n     *   in `changedProps`\n     * @return {void}\n     * @protected\n     */\n    _propertiesChanged(currentProps, changedProps, oldProps) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * Method called to determine whether a property value should be\n     * considered as a change and cause the `_propertiesChanged` callback\n     * to be enqueued.\n     *\n     * The default implementation returns `true` if a strict equality\n     * check fails. The method always returns false for `NaN`.\n     *\n     * Override this method to e.g. provide stricter checking for\n     * Objects/Arrays when using immutable patterns.\n     *\n     * @param {string} property Property name\n     * @param {*} value New property value\n     * @param {*} old Previous property value\n     * @return {boolean} Whether the property should be considered a change\n     *   and enqueue a `_proeprtiesChanged` callback\n     * @protected\n     */\n    _shouldPropertyChange(property, value, old) {\n      return (\n        // Strict equality check\n        (old !== value &&\n          // This ensures (old==NaN, value==NaN) always returns false\n          (old === old || value === value))\n      );\n    }\n\n    /**\n     * Implements native Custom Elements `attributeChangedCallback` to\n     * set an attribute value to a property via `_attributeToProperty`.\n     *\n     * @param {string} name Name of attribute that changed\n     * @param {?string} old Old attribute value\n     * @param {?string} value New attribute value\n     * @param {?string} namespace Attribute namespace.\n     * @return {void}\n     * @suppress {missingProperties} Super may or may not implement the callback\n     */\n    attributeChangedCallback(name, old, value, namespace) {\n      if (old !== value) {\n        this._attributeToProperty(name, value);\n      }\n      if (super.attributeChangedCallback) {\n        super.attributeChangedCallback(name, old, value, namespace);\n      }\n    }\n\n    /**\n     * Deserializes an attribute to its associated property.\n     *\n     * This method calls the `_deserializeValue` method to convert the string to\n     * a typed value.\n     *\n     * @param {string} attribute Name of attribute to deserialize.\n     * @param {?string} value of the attribute.\n     * @param {*=} type type to deserialize to, defaults to the value\n     * returned from `typeForProperty`\n     * @return {void}\n     */\n    _attributeToProperty(attribute, value, type) {\n      if (!this.__serializing) {\n        const map = this.__dataAttributes;\n        const property = map && map[attribute] || attribute;\n        this[property] = this._deserializeValue(value, type ||\n          this.constructor.typeForProperty(property));\n      }\n    }\n\n    /**\n     * Serializes a property to its associated attribute.\n     *\n     * @suppress {invalidCasts} Closure can't figure out `this` is an element.\n     *\n     * @param {string} property Property name to reflect.\n     * @param {string=} attribute Attribute name to reflect to.\n     * @param {*=} value Property value to refect.\n     * @return {void}\n     */\n    _propertyToAttribute(property, attribute, value) {\n      this.__serializing = true;\n      value = (arguments.length < 3) ? this[property] : value;\n      this._valueToNodeAttribute(/** @type {!HTMLElement} */(this), value,\n        attribute || this.constructor.attributeNameForProperty(property));\n      this.__serializing = false;\n    }\n\n    /**\n     * Sets a typed value to an HTML attribute on a node.\n     *\n     * This method calls the `_serializeValue` method to convert the typed\n     * value to a string.  If the `_serializeValue` method returns `undefined`,\n     * the attribute will be removed (this is the default for boolean\n     * type `false`).\n     *\n     * @param {Element} node Element to set attribute to.\n     * @param {*} value Value to serialize.\n     * @param {string} attribute Attribute name to serialize to.\n     * @return {void}\n     */\n    _valueToNodeAttribute(node, value, attribute) {\n      const str = this._serializeValue(value);\n      if (str === undefined) {\n        node.removeAttribute(attribute);\n      } else {\n        node.setAttribute(attribute, str);\n      }\n    }\n\n    /**\n     * Converts a typed JavaScript value to a string.\n     *\n     * This method is called when setting JS property values to\n     * HTML attributes.  Users may override this method to provide\n     * serialization for custom types.\n     *\n     * @param {*} value Property value to serialize.\n     * @return {string | undefined} String serialized from the provided\n     * property  value.\n     */\n    _serializeValue(value) {\n      switch (typeof value) {\n        case 'boolean':\n          return value ? '' : undefined;\n        default:\n          return value != null ? value.toString() : undefined;\n      }\n    }\n\n    /**\n     * Converts a string to a typed JavaScript value.\n     *\n     * This method is called when reading HTML attribute values to\n     * JS properties.  Users may override this method to provide\n     * deserialization for custom `type`s. Types for `Boolean`, `String`,\n     * and `Number` convert attributes to the expected types.\n     *\n     * @param {?string} value Value to deserialize.\n     * @param {*=} type Type to deserialize the string to.\n     * @return {*} Typed value deserialized from the provided string.\n     */\n    _deserializeValue(value, type) {\n      switch (type) {\n        case Boolean:\n          return (value !== null);\n        case Number:\n          return Number(value);\n        default:\n          return value;\n      }\n    }\n\n  }\n\n  return PropertiesChanged;\n});\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/@polymer/polymer/lib/mixins/properties-changed.js","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * @fileoverview\n *\n * This module provides a number of strategies for enqueuing asynchronous\n * tasks. Each sub-module provides a standard `run(fn)` interface that returns a\n * handle, and a `cancel(handle)` interface for canceling async tasks before\n * they run.\n *\n * @summary Module that provides a number of strategies for enqueuing\n * asynchronous tasks.\n */\n\nimport './boot.js';\n\n// Microtask implemented using Mutation Observer\nlet microtaskCurrHandle = 0;\nlet microtaskLastHandle = 0;\nlet microtaskCallbacks = [];\nlet microtaskNodeContent = 0;\nlet microtaskNode = document.createTextNode('');\nnew window.MutationObserver(microtaskFlush).observe(microtaskNode, {characterData: true});\n\nfunction microtaskFlush() {\n  const len = microtaskCallbacks.length;\n  for (let i = 0; i < len; i++) {\n    let cb = microtaskCallbacks[i];\n    if (cb) {\n      try {\n        cb();\n      } catch (e) {\n        setTimeout(() => { throw e; });\n      }\n    }\n  }\n  microtaskCallbacks.splice(0, len);\n  microtaskLastHandle += len;\n}\n\n/**\n * Async interface wrapper around `setTimeout`.\n *\n * @namespace\n * @summary Async interface wrapper around `setTimeout`.\n */\nconst timeOut = {\n  /**\n   * Returns a sub-module with the async interface providing the provided\n   * delay.\n   *\n   * @memberof timeOut\n   * @param {number=} delay Time to wait before calling callbacks in ms\n   * @return {!AsyncInterface} An async timeout interface\n   */\n  after(delay) {\n    return {\n      run(fn) { return window.setTimeout(fn, delay); },\n      cancel(handle) {\n        window.clearTimeout(handle);\n      }\n    };\n  },\n  /**\n   * Enqueues a function called in the next task.\n   *\n   * @memberof timeOut\n   * @param {!Function} fn Callback to run\n   * @param {number=} delay Delay in milliseconds\n   * @return {number} Handle used for canceling task\n   */\n  run(fn, delay) {\n    return window.setTimeout(fn, delay);\n  },\n  /**\n   * Cancels a previously enqueued `timeOut` callback.\n   *\n   * @memberof timeOut\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    window.clearTimeout(handle);\n  }\n};\nexport {timeOut};\n\n/**\n * Async interface wrapper around `requestAnimationFrame`.\n *\n * @namespace\n * @summary Async interface wrapper around `requestAnimationFrame`.\n */\nconst animationFrame = {\n  /**\n   * Enqueues a function called at `requestAnimationFrame` timing.\n   *\n   * @memberof animationFrame\n   * @param {function(number):void} fn Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run(fn) {\n    return window.requestAnimationFrame(fn);\n  },\n  /**\n   * Cancels a previously enqueued `animationFrame` callback.\n   *\n   * @memberof animationFrame\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    window.cancelAnimationFrame(handle);\n  }\n};\nexport {animationFrame};\n\n/**\n * Async interface wrapper around `requestIdleCallback`.  Falls back to\n * `setTimeout` on browsers that do not support `requestIdleCallback`.\n *\n * @namespace\n * @summary Async interface wrapper around `requestIdleCallback`.\n */\nconst idlePeriod = {\n  /**\n   * Enqueues a function called at `requestIdleCallback` timing.\n   *\n   * @memberof idlePeriod\n   * @param {function(!IdleDeadline):void} fn Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run(fn) {\n    return window.requestIdleCallback ?\n      window.requestIdleCallback(fn) :\n      window.setTimeout(fn, 16);\n  },\n  /**\n   * Cancels a previously enqueued `idlePeriod` callback.\n   *\n   * @memberof idlePeriod\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    window.cancelIdleCallback ?\n      window.cancelIdleCallback(handle) :\n      window.clearTimeout(handle);\n  }\n};\nexport {idlePeriod};\n\n/**\n * Async interface for enqueuing callbacks that run at microtask timing.\n *\n * Note that microtask timing is achieved via a single `MutationObserver`,\n * and thus callbacks enqueued with this API will all run in a single\n * batch, and not interleaved with other microtasks such as promises.\n * Promises are avoided as an implementation choice for the time being\n * due to Safari bugs that cause Promises to lack microtask guarantees.\n *\n * @namespace\n * @summary Async interface for enqueuing callbacks that run at microtask\n *   timing.\n */\nconst microTask = {\n\n  /**\n   * Enqueues a function called at microtask timing.\n   *\n   * @memberof microTask\n   * @param {!Function=} callback Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run(callback) {\n    microtaskNode.textContent = microtaskNodeContent++;\n    microtaskCallbacks.push(callback);\n    return microtaskCurrHandle++;\n  },\n\n  /**\n   * Cancels a previously enqueued `microTask` callback.\n   *\n   * @memberof microTask\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    const idx = handle - microtaskLastHandle;\n    if (idx >= 0) {\n      if (!microtaskCallbacks[idx]) {\n        throw new Error('invalid async handle: ' + handle);\n      }\n      microtaskCallbacks[idx] = null;\n    }\n  }\n\n};\nexport {microTask};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/@polymer/polymer/lib/utils/async.js","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nconst caseMap = {};\nconst DASH_TO_CAMEL = /-[a-z]/g;\nconst CAMEL_TO_DASH = /([A-Z])/g;\n\n/**\n * Module with utilities for converting between \"dash-case\" and \"camelCase\"\n * identifiers.\n *\n * @summary Module that provides utilities for converting between \"dash-case\"\n *   and \"camelCase\".\n */\n`TODO(modulizer): A namespace named Polymer.CaseMap was\ndeclared here. The surrounding comments should be reviewed,\nand this string can then be deleted`;\n\n/**\n * Converts \"dash-case\" identifier (e.g. `foo-bar-baz`) to \"camelCase\"\n * (e.g. `fooBarBaz`).\n *\n * @param {string} dash Dash-case identifier\n * @return {string} Camel-case representation of the identifier\n */\nexport function dashToCamelCase(dash) {\n  return caseMap[dash] || (\n    caseMap[dash] = dash.indexOf('-') < 0 ? dash : dash.replace(DASH_TO_CAMEL,\n      (m) => m[1].toUpperCase()\n    )\n  );\n}\n\n/**\n * Converts \"camelCase\" identifier (e.g. `fooBarBaz`) to \"dash-case\"\n * (e.g. `foo-bar-baz`).\n *\n * @param {string} camel Camel-case identifier\n * @return {string} Dash-case representation of the identifier\n */\nexport function camelToDashCase(camel) {\n  return caseMap[camel] || (\n    caseMap[camel] = camel.replace(CAMEL_TO_DASH, '-$1').toLowerCase()\n  );\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/@polymer/polymer/lib/utils/case-map.js","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { render as baseRender, Template, templateCaches } from '../lit-html.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = `${result.type}--${scopeName}`;\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = new Map();\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.get(result.strings);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (typeof window.ShadyCSS === 'object') {\n            window.ShadyCSS.prepareTemplate(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.set(result.strings, template);\n    }\n    return template;\n};\nexport function render(result, container, scopeName) {\n    return baseRender(result, container, shadyTemplateFactory(scopeName));\n}\n//# sourceMappingURL=shady-render.js.map\n\n\n// WEBPACK FOOTER //\n// ./node_modules/lit-html/lib/shady-render.js"],"sourceRoot":""}